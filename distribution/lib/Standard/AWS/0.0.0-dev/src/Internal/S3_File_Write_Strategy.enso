private

from Standard.Base import all
import Standard.Base.Errors.Common.Forbidden_Operation
import Standard.Base.Errors.File_Error.File_Error
from Standard.Base.System.File.Generic.File_Write_Strategy import File_Write_Strategy, default_overwrite, default_append, default_raise_error, generic_remote_write_with_local_file

import project.Errors.S3_Error

## PRIVATE
instance =
    File_Write_Strategy.Value default_overwrite default_append default_raise_error s3_backup create_dry_run_file generic_remote_write_with_local_file

## PRIVATE
create_dry_run_file file copy_original =
    _ = [file, copy_original]
    Error.throw (Forbidden_Operation.Error "Currently dry-run is not supported for S3_File, so writing to an S3_File is forbidden if the Output context is disabled.")

## PRIVATE
   A backup strategy tailored for S3.
   Since S3 does not support a cheap 'move' operation, the standard backup
   strategy that mostly relies on it does not work too well.
   Instead, S3 relies on a simpler strategy:
   1. If the destination file exists, copy it to a backup location
      (overwriting a previous backup file, if it was present).
   2. Write the new file.
     i. If the write succeeded, that's it.
        ii. If the write failed, 'restore' from the backup - copy the backup
            back to the original location and delete the backup file (as it's no
            longer needed because the original file is back with the old contents).
s3_backup file action = recover_errors <|
    backup_location = file.parent / (file.name + ".bak")
    has_backup = if file.exists.not then False else
        Panic.rethrow <| file.copy_to backup_location replace_existing=True
        True

    revert_backup =
        if has_backup then
            Panic.rethrow <| backup_location.copy_to file
            Panic.rethrow <| backup_location.delete

    with_failure_handler revert_backup <|
        file.with_output_stream [File_Access.Write, File_Access.Truncate_Existing] action

## PRIVATE
with_failure_handler ~failure_action ~action =
    panic_handler caught_panic =
        failure_action
        Panic.throw caught_panic

    result = Panic.catch Any handler=panic_handler action
    if result.is_error.not then result else
        failure_action
        result


## PRIVATE
recover_errors ~action =
    Panic.catch S3_Error handler=(.convert_to_dataflow_error) <|
        Panic.catch File_Error handler=(.convert_to_dataflow_error) <|
            action
