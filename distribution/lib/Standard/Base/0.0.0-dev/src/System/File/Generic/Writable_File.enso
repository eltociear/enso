import project.Any.Any
import project.Data.Text.Text
import project.Data.Vector.Vector
import project.Nothing.Nothing
import project.System.Input_Stream.Input_Stream
import project.System.File.Generic.File_Write_Strategy.File_Write_Strategy
import project.System.File.Existing_File_Behavior.Existing_File_Behavior
import project.System.File.File
import project.System.File.File_Access.File_Access
import project.System.File_Format_Metadata.File_Format_Metadata
import project.System.Output_Stream.Output_Stream
from project.Data.Boolean import Boolean, False, True

## PRIVATE
   Any type that represents a file that can be written to should be convertible
   to this common type-class.

   This allows our code to work with any kind of file backend, e.g. the local
   file system as well as remote ones like S3, using the same basic interface.

   The type-class currently provides the following capabilities:
   - write_strategy: a `File_Write_Strategy` instance denoting how to handle
     file writing depending on `Existing_File_Behavior` and dry run settings.
   - exists: the underlying `file` should have an `exists` method available,
     because it is used by some logic as an early exit condition.
type Writable_File
    ## PRIVATE
    Value file (write_strategy : File_Write_Strategy)

    ## PRIVATE
    exists self -> Boolean = self.file.exists

    ## PRIVATE
    write self (existing_file_behavior : Existing_File_Behavior) (action : Output_Stream -> Any) -> Any =
        self.write_strategy.write self.file existing_file_behavior action

    ## PRIVATE
    write_handling_dry_run self (existing_file_behavior : Existing_File_Behavior) (action : Any -> Output_Stream -> Any) -> Any =
        self.write_strategy.write_handling_dry_run self.file existing_file_behavior action

    ## PRIVATE
    to_text self -> Text =
        "(Writable_File " + self.file.to_text + ")"

    ## PRIVATE
    to_display_text self -> Text = self.file.to_display_text

## PRIVATE
Writable_File.from (that : Text) =
    ## Currently this only works for local filesystem paths
       TODO We should extend it to also support custom paths like S3, through a ServiceProvider solution
    Writable_File.from (File.new that)

## PRIVATE
   If a conversion to `File_Format_Metadata` is needed, we delegate to the underlying file.
File_Format_Metadata.from (that : Writable_File) = File_Format_Metadata.from that.file
