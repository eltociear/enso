import project.Any.Any
import project.Data.Text.Text
import project.Data.Vector.Vector
import project.Nothing.Nothing
import project.System.Input_Stream.Input_Stream
import project.System.File.File
import project.System.File.File_Access.File_Access
from project.Data.Boolean import Boolean, False, True

## PRIVATE
   Any type that represents a file that can be written to should be convertible
   to this common type-class.

   This allows our code to work with any kind of file backend, e.g. the local
   file system as well as remote ones like S3, using the same basic interface.
type Writable_File
    ## PRIVATE
    Value file

    ## PRIVATE
    exists self -> Boolean =
        self.file.exists

    ## PRIVATE
    delete self -> Nothing =
        self.file.delete

    ## PRIVATE
    copy_to self (destination : Writable_File) -> Nothing =
        self.file.copy_to destination

    ## PRIVATE
       This method is optional, it may choose to raise Forbidden_Operation error
       if dry run should not be supported for a given backend.
    create_dry_run_file self (copy_original : Boolean) -> Writable_File =
        self.file.create_dry_run_file copy_original

    ## PRIVATE
    with_output_stream self (open_options : Vector File_Access) (action : Input_Stream -> Any) =
        self.file.with_output_stream open_options action

    ## PRIVATE
       The `parent` and `/` methods are needed to be able to create path for the
       backup file and temporary files used in the Existing_File_Behavior.Backup
       mode.
    parent self -> Writable_File =
        Writable_File.from self.file.parent

    ## PRIVATE
       The `parent` and `/` methods are needed to be able to create path for the
       backup file and temporary files used in the Existing_File_Behavior.Backup
       mode.
    / self (that : Text) -> Writable_File =
        Writable_File.from (self.file / that)

    ## PRIVATE
    name self -> Text =
        self.file.name

## PRIVATE
Writable_File.from (that : Text) =
    ## Currently this only works for local filesystem paths
       TODO We should extend it to also support custom paths like S3, through a ServiceProvider solution
    Writable_File.from (File.new that)
