import project.Error.Error
import project.Errors.File_Error.File_Error
import project.Runtime.Context
import project.System.File.Existing_File_Behavior.Existing_File_Behavior
import project.System.File.File_Access.File_Access
from project.Data.Boolean import Boolean, False, True

## PRIVATE
   Specifies the logic for handling writing files with options like `Existing_File_Behavior` and dry run.
type File_Write_Strategy
    ## PRIVATE
       Each of the `write_` strategies takes the file as a first argument, an
       action taking an `Output_Stream` as a second argument and should run this
       action against the output stream opened for the file and return its
       result.

       The `create_dry_run_file` takes a destination file and a boolean flag
       stating if it needs to copy the original file as part of preparation. It
       should return a dry run counterpart that is associated with it. It may
       raise an error if dry runs are not supported on a given backend. Note
       that currently there is no mechanism for managing cleanup of the dry run
       files, so they only should be created if a 'temporary directory' is
       available.
    Value write_overwriting write_appending write_raising_error write_backing_up create_dry_run_file

    ## PRIVATE
       Writes to a file according to the provided existing file behaviour.
       This variant does not handle dry run logic.
       It will most likely fail at `with_output_stream` if the output context is
       not enabled. It may be used if the caller has custom handling for dry run
       and calls this method within `Context.Output.with_enabled`.
       The method returns the file that has been written to.
    write self file existing_file_behavior action =
        r = case existing_file_behavior of
            Existing_File_Behavior.Overwrite -> self.write_overwriting file action
            Existing_File_Behavior.Backup -> self.write_backing_up file action
            Existing_File_Behavior.Append -> self.write_appending file action
            Existing_File_Behavior.Error -> self.write_raising_error file action
        r.if_not_error file

    ## PRIVATE
       Writes to a file, executing a default dry-run logic if the Output Context
       is disabled.

       The `action` is called with the effective file (original destination file
       or its dry run counterpart) and an output stream to that file.
       The method returns the file that has been written to.
    write_handling_dry_run self file existing_file_behavior action =
        if Context.Output.is_enabled then self.write file existing_file_behavior action else
            effective_behavior = dry_run_behavior file existing_file_behavior
            effective_file = self.create_dry_run_file file effective_behavior.copy_original
            r = effective_file.if_not_error <|
                self.write effective_file effective_behavior.existing_file_behavior output_stream->
                    action effective_file output_stream
            r.if_not_error effective_file

## PRIVATE
default_overwrite file action =
    file.with_output_stream [File_Access.Write, File_Access.Create, File_Access.Truncate_Existing] action

## PRIVATE
default_append file action =
    file.with_output_stream [File_Access.Write, File_Access.Create, File_Access.Append] action

## PRIVATE
default_raise_error file action =
    file.with_output_stream [File_Access.Write, File_Access.Create_New] action

## PRIVATE
type Dry_Run_File_Settings
    ## PRIVATE
       Arguments:
       - existing_file_behavior: Specifies how to treat an existing dry run file.
         Usually, `Overwrite` is used regardless of the original setting.
         The exception is `Append`, which usually requires to copy the original
         file first to keep the state consistent.
       - copy_original: Specifies whether to copy the original file to the dry
         run file before writing. If the file is not copied, contents from a
         previous dry run may still be there, so any options other than
         `Overwrite` may be risky.
    Value existing_file_behavior:Existing_File_Behavior copy_original:Boolean

## PRIVATE
dry_run_behavior file behavior:Existing_File_Behavior -> Dry_Run_File_Settings = case behavior of
    Existing_File_Behavior.Error ->
        ## In case the _original_ file exists, the dry run will raise error because the actual write would have errored.
           If the original file does not exist, we can just overwrite the dry run file.
        if file.exists then Error.throw (File_Error.Already_Exists file) else
            Dry_Run_File_Settings.Value Existing_File_Behavior.Overwrite copy_original=False
    Existing_File_Behavior.Backup ->
        Dry_Run_File_Settings.Value Existing_File_Behavior.Overwrite copy_original=False
    Existing_File_Behavior.Overwrite ->
        Dry_Run_File_Settings.Value Existing_File_Behavior.Overwrite copy_original=False
    Existing_File_Behavior.Append ->
        Dry_Run_File_Settings.Value Existing_File_Behavior.Append copy_original=True
